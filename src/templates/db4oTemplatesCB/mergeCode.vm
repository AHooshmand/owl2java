package $instancePkg;

import java.io.File;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.db4o.Db4o;
import com.db4o.ObjectContainer;
import com.db4o.config.Configuration;
import com.db4o.ta.TransparentPersistenceSupport;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntDocumentManager;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;

import de.incunabulum.owl2java.core.model.jenautils.NullFilter;
import de.incunabulum.owl2java.core.generator.db4o.IDb4oMergeCode;


/**
 * Instance Mapping
 */
public class $instanceName implements IDb4oMergeCode {

    private static Log log = LogFactory.getLog(${instanceName}.class);
    
    private static Map<String, Object> uri2db4oObject = new HashMap<String, Object>();
    
    ObjectContainer db;
	OntModel ontModel;
    
   
    public void run(String dbPath, OntModel ontModel) {
    	run(dbPath, false, ontModel);
    }
    
    public void run(String dbPath, boolean deleteDbFirst, OntModel ontModel) {
    	this.ontModel = ontModel;
    	
    	if (deleteDbFirst) {
    		log.info("Deleting db4o database " + dbPath);
    		new File(dbPath).delete();    		
    	}
    	
    	openDbContainer(dbPath);

    	createInstances();
		mapDTProperties();
		mapObjectProperties();

		log.info("Closing db");
    	db.close();
    	log.info("Done");    	
    }
    
    public void run(String dbPath, String ontUri) {
    	run(dbPath, false, ontUri);
    }
    
    public void run(String dbPath, boolean deleteDbFirst, String ontUri) {
		ontModel = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM);
		OntDocumentManager owlDocMgr = ontModel.getDocumentManager();
		owlDocMgr.setProcessImports(true);
		ontModel.read(ontUri);
        	
    	if (deleteDbFirst) {
    		log.info("Deleting db4o database " + dbPath);
    		new File(dbPath).delete();    		
    	}
    	
    	openDbContainer(dbPath);

    	createInstances();
		mapDTProperties();
		mapObjectProperties();

		log.info("Closing db");
    	db.close();
    	log.info("Done");
    	
    }
    
    
    
    protected void openDbContainer(String dbPath) {
    	log.info("Opening db4o database at " + dbPath);
    	Configuration conf = Db4o.newConfiguration();
    	conf.add(new TransparentPersistenceSupport());
    	db = Db4o.openFile(conf, dbPath);
    }
    
    @SuppressWarnings("unchecked")
    protected void createInstances() {
    	log.info("Adding all instances to the db4o database");
    	OntClass ontClass;
    	Iterator it;
        #foreach ($cls in $jmodel.listJClasses())
        	log.info("Creating instances of class $cls.getJavaClassFullName()");
        	ontClass = ontModel.getOntClass("$cls.getMapUri()");
        	it = ontClass.listInstances(true);
        	while (it.hasNext()) {
        		Individual ontInst = (Individual) it.next();
        		log.debug("  Creating instance for uri " + ontInst.getURI());
        		$cls.getJavaClassFullName() objInst = new $cls.getJavaClassFullName()();
        		objInst.uriInstance = ontInst.getURI();
        		uri2db4oObject.put(ontInst.getURI(), objInst);
        		db.store(objInst);
			}
			        	
        #end
    }
    
    @SuppressWarnings("unchecked")
    protected void mapDTProperties() {
    	log.info("Mapping datatype properties");
        OntClass ontClass;
        Iterator it;
        
        #foreach ($cls in $jmodel.listJClasses())
		#set($clsFullName = $cls.getJavaClassFullName())
			// Class $clsFullName
    		log.info("Mapping datatype properties for class $clsFullName");
    		ontClass = ontModel.getOntClass("$cls.getMapUri()");
        	
        	// iterate over all direct instances
        	it = ontClass.listInstances(true);
        	while (it.hasNext()) {
        		Individual ontInst = (Individual) it.next();
        		String uri = ontInst.getURI();
        		log.debug("Mapping instance " + uri);
        		
        		$clsFullName objInst  = ($clsFullName) uri2db4oObject.get(uri);

				// map class datatype property
				Property ontProp;
				ExtendedIterator itProp; 
				
				#foreach($prop in $cls.listAggregatedProperties()) 
					#if($prop.isDataTypeProperty())
						#parse("/db4oTemplatesCB/mapPropDT.vm")
					#end
				#end
			}
			
		#end    	
    }
    
    @SuppressWarnings("unchecked")
    protected void mapObjectProperties() {
    	log.info("Mapping object properties");
        OntClass ontClass;
        Iterator it;
        #foreach ($cls in $jmodel.listJClasses())
		#set($clsFullName = $cls.getJavaClassFullName())
        	// Class $clsFullName
    		log.info("Mapping datatype properties for class $clsFullName");
    		ontClass = ontModel.getOntClass("$cls.getMapUri()");
        	
        	// iterate over all instances
        	it = ontClass.listInstances(true);
        	while (it.hasNext()) {
        		Individual ontInst = (Individual) it.next();
        		String uri = ontInst.getURI();
        		log.debug("Mapping instance " + uri);
        		
        		$clsFullName objInst  = ($clsFullName) uri2db4oObject.get(uri);

				// map object properties property 
				Property ontProp;
				ExtendedIterator objPropIt; 
				
				#foreach($prop in $cls.listAggregatedProperties())
					#if($prop.isObjectProperty())
						#parse("/db4oTemplatesCB/mapPropObj.vm")
					#end
				#end
			}
			
		#end    	
    }
    	    
    


}
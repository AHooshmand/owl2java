#set($cName = $cls.getJavaClassName())
#set($cFName = $cls.getJavaClassFullName())
#set($cUri = $cls.getMapUri())
#set($iName = $cls.getJavaInterfaceName())
#set($iFName = $cls.getJavaInterfaceFullName())
##
package $cls.getJavaPackageName();

import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.db4o.ObjectContainer;
import com.db4o.activation.ActivationPurpose;
import com.db4o.activation.Activator;
import com.db4o.collections.ArrayList4;
import com.db4o.query.Predicate;
import com.db4o.ta.Activatable;

/**
 * Class $cls.getMapUri()
 */
@SuppressWarnings("unused")
#if($cls.hasSuperClasses()) 
	public class $cName extends ${cls.getFirstDirectSuperClass().getJavaClassFullName()} {
#else
	public class $cName implements Activatable { 
#end

#if( ! $cls.hasSuperClasses())    
    @SuppressWarnings("unused")
    public static transient Log log;
#end

#if( ! $cls.hasSuperClasses())     
    public static transient String uriClass;
    public String uriInstance;
#end 
 
	static {
		log = LogFactory.getLog(${cName}.class);
		uriClass = "$cls.getMapUri()";
	}	
	
    public $cName() {}

## create transparent persistence handling for super class
#if( ! $cls.hasSuperClasses())    
	public transient Activator activator;
	
	public void activate(ActivationPurpose purpose) {
		if (activator != null)
			activator.activate(purpose);
		}
	
	public void bind(Activator actv) {
		if (activator == actv)
			return;
		
		if (actv != null && activator != null) 
			throw new IllegalStateException();
		
		activator = actv;
	}
#end

## getters for instance, class uris 	
#if( ! $cls.hasSuperClasses())	
	/**
	 * Getter for class, instance URI
	 */
	public String getUriInstance() {
		activate(ActivationPurpose.READ);	
	 	return uriInstance;
 	}
 	
 	public String getUriClass() {
		activate(ActivationPurpose.READ); 	
 		return uriClass;
 	}
#end

## toString method 	
#if( ! $cls.hasSuperClasses())	
	/**
	 * toString method
	 */
	public String toString() {
		return getUriInstance();
 	}
#end

    /**
     * Static Functions for instance handling
     */
    public static List<$cName> list${cName}(ObjectContainer db) {
    	List <$cName> objects = db.query(${cName}.class);
    	return objects;
    }

    public static int count${cName}(ObjectContainer db) {
    	List <$cName> objects = list${cName}(db);
    	return objects.size();
    }

## add the domain property methods
#foreach($prop in $cls.listDomainProperties())
	#set($propnameCaps = $prop.getJavaNameCaps())  		## the java name with first letter capitalized
	#set($propname = $prop.getJavaName())          		## the java name
	#parse("/db4oTemplatesCB/clsPropBase.vm")
	#if($prop.isObjectProperty())
		#parse("/db4oTemplatesCB/clsPropObj.vm")
	#else
		#set($rangeMethod = $prop.getDataRangeMethod()) ## the name of the method to acess a dataproperty range
		#set($rangeURI = $prop.getRangeUri())      		## the uri of the range. Used for datatype properties
		#parse("/db4oTemplatesCB/clsPropDT.vm")
	#end
#end
}
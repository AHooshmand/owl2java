#set($name = $p.getJavaFullNameCaps())      ## the java name with first letter capitalized
#set($jname = $p.getJavaName())             ## the java name 
#set($range = $p.getRangeJava())            ## the java name for the range
#set($rangeFull = $p.getRangeJavaFull())    ## the full java name including package for the range
#set($rangeFullUri = $p.getRangeUri())      ## the uri of the range. Used for datatype properties
##
##

    /**
     * Domain property "$p.getMapUri()"
     */
    public boolean exists$name () {
        return hasProperty(${pkgBase}.${pkgTools}.${vocabName}.${jname});
    }

    public boolean has$name($rangeFull #mixedlowercase($range)Value) {
        return hasProperty(${pkgBase}.${pkgTools}.${vocabName}.${jname}, #mixedlowercase($range)Value);
    }

## $p is functional
    #if ($p.isFunctional())
        public $rangeFull get$name () {
            RDFNode n = getPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${jname});
        #if($p.isObjectProperty())
            if (n.canAs(${rangeFull}.class))
                return ($rangeFull) n.as(${range}.class);
            else {
                log.warn("Could not convert property $p.getMapUri() to type $rangeFull");
                return null;
            }
        #else
            if (n instanceof Literal) {
                Literal l = (Literal) n;
                return ($rangeFull) (l.getValue());
            } else {
                log.warn("Could not convert property $p.getMapUri() to type $rangeFull");
                return null;
            }
        #end  ## $p.isObjectProperty()
        }

        public void set$name($rangeFull #mixedlowercase($range)Value) {
            removeAll(${pkgBase}.${pkgTools}.${vocabName}.${jname});
        #if($p.isObjectProperty())
            setPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${jname}, #mixedlowercase($range)Value);
        #else
            Literal literal = getModel().createTypedLiteral(#mixedlowercase($range)Value.toString(), "$rangeFullUri");
            setPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${jname}, literal);
        #end ## $p.isObjectProperty()
        }

        public void remove$name() {
            removeAll(${pkgBase}.${pkgTools}.${vocabName}.${jname});
        }

## $p is not functional
    #else
        public void add$name($rangeFull #mixedlowercase($range)Value) {
        #if ($p.isObjectProperty))
            addProperty(${pkgBase}.${pkgTools}.${vocabName}.${jname}, #mixedlowercase($range)Value);
        #else
            Literal literal = getModel().createTypedLiteral(#mixedlowercase($range)Value.toString(), "$rangeFullUri");
            setPropertyValue(${pkgBase}.${pkgTools}.${vocabName}.${jname}, literal);
        #end ## $p.isObjectProperty()
        }

        public void addAll$name(List<$rangeFull> #mixedlowercase($range)List) {
            for ($rangeFull o : #mixedlowercase($range)List)
                add$name(o);
        }

        public void remove$name($rangeFull #mixedlowercase($range)Value) {
        #if ($p.isObjectProperty())
            removeProperty(${pkgBase}.${pkgTools}.${vocabName}.${jname}, #mixedlowercase($range)Value);
        #else
            Literal literal = getModel().createTypedLiteral(#mixedlowercase($range)Value.toString(), "$rangeFullUri");
            removeProperty(${pkgBase}.${pkgTools}.${vocabName}.${jname}, literal);
        #end ## $p.isObjectProperty()
        }

        public void removeAll$name() {
            removeAll(${pkgBase}.${pkgTools}.${vocabName}.${jname});
        }

        #if($p.isObjectProperty)
        @SuppressWarnings("unchecked")
        public Iterator<$rangeFull> list${name}() {
            ExtendedIterator it = listProperties(${pkgBase}.${pkgTools}.${vocabName}.${jname});
            return it.mapWith(${rangeFull}.mapper).filterDrop(nullFilter);
        }
        #else
        @SuppressWarnings("unchecked")
        public Iterator list${name}() {
            ExtendedIterator it = listProperties(${pkgBase}.${pkgTools}.${vocabName}.${jname});
            return it;
        }
        #end ## $p.isObjectProperty()

        #if($cls.hasModifiesRestriction($p))
            // XXX: Restrictions apply!
        #end
        ##
        #if($p.hasParentProperties())
            // XXX: Parent properites present
        #end
        ##
        #if($p.hasInversePropertyies())
            // XXX: Inverse properites present
        #end

    #end ## if/else/end $p.isFunctional()